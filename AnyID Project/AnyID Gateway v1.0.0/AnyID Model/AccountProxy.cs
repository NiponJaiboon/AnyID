using System;
using System.Collections.Generic;
using iSabaya;
using NHibernate;
using System.Runtime.Serialization;

namespace AnyIDModel
{
    public class AccountProxy : PersistentStatefulEntity //, ITemporal
    {
        #region persistent

        //[DataMember]
        public virtual AnyID AnyID { get; set; }

        private Customer customer;
        //[DataMember]
        public virtual Customer Customer
        {
            get { return this.customer; }
            set
            {
                this.customer = value;
                if (value != null)
                    this.CISID = value.CISID;
            }
        }

        /// <summary>
        /// Single-owner bank account only
        /// </summary>
        [DataMember]
        public virtual BankAccount BankAccount { get; set; }
        public virtual string RegisteringBranch { get; set; }
        public virtual string CISID { get; set; }
        public virtual new AccountProxyState CurrentState
        {
            get { return (AccountProxyState)base.CurrentState; }
            set
            {
                if (base.CurrentState != null && base.CurrentState.ID == 0)
                    States.Add((AccountProxyState)base.CurrentState);
                base.CurrentState = value;
            }
        }

        public virtual AccountProxyStateCategory CurrentStateCategory
        {
            get
            {
                if (this.CurrentState != null)
                    return this.CurrentState.StateCategory;
                else
                    throw new Exception("Cannot get the current state category of an account proxy because it's CurrentState is null.");
            }
            set { } //do nothing - for NHibernate
        }

        //[DataMember]
        public virtual string DisplayName { get; set; }
        /// <summary>
        /// Generated by RegisterTransaction upon approval.
        /// YYnnnnnnnn where YY is the last two digits of Gregorian year.
        /// </summary>
        //[DataMember]
        public virtual string DummyAccountNo { get; set; }
        //[DataMember]
        public virtual string RegistrationID { get; set; }
        //[DataMember]
        public virtual DateTime RegisteredTS { get; set; }
        public virtual UserAction RequestAction { get; set; }
        public virtual ProxyTransaction LatestTransaction { get; set; }
        public virtual new IList<AccountProxyState> States
        {
            get
            {
                if (base.States == null)
                    base.States = new List<AccountProxyState>();
                return (IList<AccountProxyState>)base.States;
            }
            set
            {
                base.States = value;
            }
        }

        [DataMember]
        public virtual EntityStatus Status { get; set; }

        public virtual string KKRequiredStateDescription { get; set; }

        #endregion

        public static string GenDummyAccountYearlySequenceNo(Context context, int year)
        {
            int lastTwoDigitOfYear = year - 2000;
            var seq = SequenceNoGenerator.GetInstance(context.MySystem.SystemID, Configuration.DummyAccountNumberSequenceType, lastTwoDigitOfYear);
            return lastTwoDigitOfYear.ToString("D2") + seq.GenSquenceNumber(context).ToString("D8");
        }

        public virtual IList<ProxyTransaction> GetAllTransactionsByAccountProxyID(Context context)
        {
            return context.PersistenceSession.QueryOver<ProxyTransaction>().Where(t => t.AccountProxy.ID == this.ID).List();
        }

        public virtual IList<ProxyTransaction> GetAllTransactionsByRegistrationID(Context context)
        {
            return context.PersistenceSession.QueryOver<ProxyTransaction>().Where(t => t.RegistrationID == this.RegistrationID).List();
        }

        public virtual void Transit(Context context, string reference, string remark, ProxyTransitionEvent ev)
        {
#if DEBUG
            string currentState;
            if (this.CurrentState == null)
                currentState = "null";
            else
                currentState = (int)this.CurrentStateCategory + " -" + this.CurrentStateCategory.ToString();
            context.Log.Debug("AccountProxy " + this.ID 
                        + ", current state " + currentState
                        + ", transition " + (int)ev + "-" + ev.ToString());
#endif
            StateEngines.ProxyStateEngine.Transit(context, this, reference, remark, (int)ev);
        }

        public override void Persist(Context context)
        {
            bool needToPersistTwice = this.ID == 0 && (this.CurrentState != null && this.CurrentState.ID == 0);
            base.Persist(context);
            if (this.CurrentState != null)
            {
                this.CurrentState.AccountProxy = this;
                this.CurrentState.Persist(context);
            }
            if (this.AnyID != null)
                this.AnyID.Persist(context);
            if (this.BankAccount != null)
                this.BankAccount.Persist(context);
            if (this.Customer != null)
                this.Customer.Persist(context);
            foreach(var s in this.States)
            {
                s.AccountProxy = this;
                s.Persist(context);
            }
            if (needToPersistTwice)
                context.Persist(this);
            //context.Persist(this);
            //base.Persist(context);
        }

        public override string ToString()
        {
            return "{" 
                //+ this.CurrentStateCategory.ToString() + ", " 
                + this.RegistrationID + ", " + this.AnyID.ToString() + ", " + this.DisplayName + ", " + this.BankAccount.ToString() + ", " + this.Customer.ToString() + ", " + this.Status.ToString() + "}";
        }

        public static IList<ProxyTransaction> GetOutstandingTransactions(Context context, string cisID)
        {
            return context.PersistenceSession.QueryOver<ProxyTransaction>()
                            .Where(t => t.CISID == cisID)
                            .List();
        }

    }
}
